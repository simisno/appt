{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\src\\\\components\\\\ConceptMap\\\\ConceptMapContainer.js\";\nimport React, { Component } from \"react\";\nimport \"./style.css\";\nimport { Stage, Layer, Rect, Text, Circle, Line } from \"react-konva\";\nimport { toast } from \"react-toastify\";\nimport Loader from \"react-loader-spinner\";\nimport RestAPI from \"services/api\";\nimport { handleServerErrors } from \"utils/errorHandler\";\n\nvar ConceptMapContainer = /*#__PURE__*/function (_Component) {\n  _inherits(ConceptMapContainer, _Component);\n\n  var _super = _createSuper(ConceptMapContainer);\n\n  function ConceptMapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ConceptMapContainer);\n\n    _this = _super.call(this, props);\n\n    _this.toTitleCase = function (phrase) {\n      return phrase.toLowerCase().split(\" \").map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      }).join(\" \");\n    };\n\n    _this.extractNodes = function () {\n      var data = _this.state.data;\n      var categories = {};\n      var keywords = {};\n      var links = {};\n\n      for (var index = 0; index < data.length; index++) {\n        var keyword = data[index].keyword;\n        var keywordCategories = data[index].category;\n        keywords[keyword] = {};\n        links[keyword] = keywordCategories;\n\n        for (var categoryIndex = 0; categoryIndex < keywordCategories.length; categoryIndex++) {\n          categories[keywordCategories[categoryIndex]] = {};\n        }\n      }\n\n      _this.setState({\n        keywords,\n        categories,\n        links\n      }, _this.generateCoordinates);\n    };\n\n    _this.generateCoordinates = function () {\n      var _this$state = _this.state,\n          keywords = _this$state.keywords,\n          categories = _this$state.categories;\n      var totalKeywords = Object.keys(keywords).length;\n      var KeywordBlockTotalSize = totalKeywords * (_this.keywordNodeSpacing + _this.keywordNodeSize);\n      var keywordStartOffset = parseInt((_this.stageHeight - KeywordBlockTotalSize) / 2);\n      var keywordCount = 0;\n\n      for (var keyword in keywords) {\n        var y = keywordStartOffset + parseInt(_this.keywordNodeSpacing / 2) + keywordCount * (parseInt(_this.keywordNodeSpacing / 2) + _this.keywordNodeSize);\n\n        keywordCount += 1;\n        keywords[keyword].x = _this.KeywordNodeX;\n        keywords[keyword].y = y;\n      }\n\n      var totalCategories = Object.keys(categories).length;\n      var categoriesBlockTotalSize = totalCategories * (_this.categoryNodeSpacing + _this.categoryNodeHeight);\n      var categoriesStartOffset = parseInt((_this.stageHeight - categoriesBlockTotalSize) / 2);\n      var categoryCount = 0;\n\n      for (var category in categories) {\n        var _y = categoriesStartOffset + parseInt(_this.categoryNodeSpacing / 2) + categoryCount * (parseInt(_this.categoryNodeSpacing / 2) + _this.categoryNodeHeight);\n\n        categoryCount += 1;\n        categories[category].x = _this.categoryNodeX;\n        categories[category].y = _y;\n      }\n\n      _this.setState({\n        keywords,\n        categories\n      });\n    };\n\n    _this.getNodes = function () {\n      var _this$state2 = _this.state,\n          keywords = _this$state2.keywords,\n          categories = _this$state2.categories,\n          links = _this$state2.links;\n      var nodes = [];\n\n      for (var keywordKey in links) {\n        var keywordLink = links[keywordKey];\n        var keyword = keywords[keywordKey];\n\n        for (var index in keywordLink) {\n          var category = categories[keywordLink[index]];\n          nodes.push( /*#__PURE__*/React.createElement(Line, {\n            points: [keyword.x, keyword.y, category.x, category.y + parseInt(_this.categoryNodeHeight / 2)],\n            tension: 500,\n            stroke: keyword.highlight && category.highlight ? _this.highlightColor : _this.lineColor,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 11\n            }\n          }));\n        }\n      }\n\n      var _loop = function _loop(_keyword) {\n        nodes.push( /*#__PURE__*/React.createElement(Circle, {\n          key: _keyword + \"circle\",\n          x: keywords[_keyword].x,\n          y: keywords[_keyword].y,\n          radius: 10,\n          fill: _this.circleFillColor,\n          strokeWidth: \"3\",\n          onMouseOver: function onMouseOver(e) {\n            return _this.mouseOverEvent(e, \"keyword\", _keyword);\n          },\n          onMouseOut: function onMouseOut(e) {\n            return _this.mouseOutEvent(e, \"keyword\", _keyword);\n          },\n          stroke: keywords[_keyword].highlight ? _this.highlightColor : _this.circleFillColor,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 9\n          }\n        }));\n        nodes.push( /*#__PURE__*/React.createElement(Text, {\n          key: _keyword + \"text\",\n          x: 10,\n          y: keywords[_keyword].y - 5,\n          text: _this.toTitleCase(_keyword),\n          fontFamily: _this.textFontFamily,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 9\n          }\n        }));\n      };\n\n      for (var _keyword in keywords) {\n        _loop(_keyword);\n      }\n\n      var _loop2 = function _loop2(_category) {\n        nodes.push( /*#__PURE__*/React.createElement(Rect, {\n          key: _category + \"rect\",\n          x: categories[_category].x,\n          y: categories[_category].y,\n          height: _this.categoryNodeHeight,\n          width: _this.categoryNodeWidth,\n          cornerRadius: 10,\n          fill: _this.rectFillColor,\n          onMouseOver: function onMouseOver(e) {\n            return _this.mouseOverEvent(e, \"category\", _category);\n          },\n          onMouseOut: function onMouseOut(e) {\n            return _this.mouseOutEvent(e, \"category\", _category);\n          },\n          strokeWidth: \"3\",\n          stroke: categories[_category].highlight ? _this.highlightColor : _this.rectFillColor,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 9\n          }\n        })); // add ellipsis to text after 10 chars\n\n        var categoryText = _category.length > 35 ? _category.slice(0, 35) + \"...\" : _category;\n        nodes.push( /*#__PURE__*/React.createElement(Text, {\n          key: _category + \"text\",\n          x: categories[_category].x + 10,\n          y: categories[_category].y + 10,\n          onMouseOver: function onMouseOver(e) {\n            return _this.mouseOverEvent(e, \"category\", _category);\n          },\n          onMouseOut: function onMouseOut(e) {\n            return _this.mouseOutEvent(e, \"category\", _category);\n          },\n          text: categoryText,\n          fontFamily: _this.textFontFamily,\n          stroke: \"white\",\n          strokeWidth: \"1\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 9\n          }\n        }));\n      };\n\n      for (var _category in categories) {\n        _loop2(_category);\n      }\n\n      return nodes;\n    };\n\n    _this.mouseOverEvent = function (event, nodeType, nodeKey) {\n      var stage = event.target.getStage();\n      var container = stage.container();\n      container.style.cursor = \"pointer\";\n      var _this$state3 = _this.state,\n          categories = _this$state3.categories,\n          keywords = _this$state3.keywords,\n          links = _this$state3.links;\n\n      if (nodeType === \"keyword\") {\n        keywords[nodeKey].highlight = true;\n        var categoryKeys = links[nodeKey];\n\n        for (var index in categoryKeys) {\n          categories[categoryKeys[index]].highlight = true;\n        }\n      }\n\n      if (nodeType === \"category\") {\n        categories[nodeKey].highlight = true;\n\n        for (var keyword in links) {\n          if (links[keyword].indexOf(nodeKey) > -1) {\n            keywords[keyword].highlight = true;\n          }\n        }\n      }\n\n      _this.setState({\n        categories,\n        keywords\n      });\n    };\n\n    _this.mouseOutEvent = function (event) {\n      var container = event.target.getStage().container();\n      container.style.cursor = \"default\";\n      var _this$state4 = _this.state,\n          categories = _this$state4.categories,\n          keywords = _this$state4.keywords;\n\n      for (var category in categories) {\n        categories[category].highlight = false;\n      }\n\n      for (var keyword in keywords) {\n        keywords[keyword].highlight = false;\n      }\n\n      _this.setState({\n        categories,\n        keywords\n      });\n    };\n\n    _this.stageHeight = 1200;\n    _this.stageWidth = 900;\n    _this.keywordNodeSize = 20;\n    _this.keywordNodeSpacing = 30;\n    _this.KeywordNodeX = 150;\n    _this.categoryNodeHeight = 30;\n    _this.categoryNodeWidth = 200;\n    _this.categoryNodeSpacing = 20;\n    _this.categoryNodeX = _this.stageWidth - _this.categoryNodeWidth - 150;\n    _this.lineColor = \"#003f5c\";\n    _this.rectStrokeColor = \"black\";\n    _this.rectFillColor = \"#dd5182\";\n    _this.circleStrokeColor = \"black\";\n    _this.circleFillColor = \"#E5AE19\";\n    _this.highlightColor = \"#ffa600\";\n    _this.textFontFamily = '-apple-system,BlinkMacSystemFont,\"Segoe UI\",\"Roboto\",\"Oxygen\",\"Ubuntu\",\"Cantarell\",\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif';\n    _this.state = {\n      data: [],\n      isLoading: true,\n      isData: true\n    };\n    return _this;\n  }\n\n  _createClass(ConceptMapContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        isLoding: true\n      }, function () {\n        RestAPI.conceptChart().then(function (response) {\n          console.log(response);\n\n          if (response.data.length === 0) {\n            _this2.setState({\n              isData: false\n            });\n          }\n\n          var chartData = [];\n          var dataLength = Math.min(response.data.length, 5);\n\n          for (var index = 0; index < dataLength; index++) {\n            chartData.push({\n              keyword: response.data[index].keyword,\n              rank: response.data[index].weight,\n              source: response.data[index].source,\n              category: response.data[index].categories.map(function (item) {\n                return item.name;\n              })\n            });\n          }\n\n          _this2.setState({\n            isLoding: false,\n            data: chartData\n          }, _this2.extractNodes);\n        }).catch(function (error) {\n          _this2.setState({\n            isLoding: false\n          });\n\n          handleServerErrors(error, toast.error);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var containerDiv = document.querySelectorAll(\".card-body\")[0]; // const width = containerDiv ? containerDiv.clientWidth : this.stageWidth;\n\n      var width = this.stageWidth;\n      var categories = this.state.categories;\n      var highlighedCategory = [];\n\n      if (categories) {\n        highlighedCategory = Object.keys(categories).filter(function (item) {\n          return categories[item].highlight;\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"conceptMapWrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      }, this.state.isLoding ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        style: {\n          padding: \"20px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        type: \"Puff\",\n        color: \"#00BFFF\",\n        height: 100,\n        width: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }\n      })) : this.state.isData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Stage, {\n        width: width,\n        height: this.stageHeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 19\n        }\n      }, this.getNodes())), /*#__PURE__*/React.createElement(\"div\", {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 17\n        }\n      }, highlighedCategory.length ? highlighedCategory[0] : \"\"))) : /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }\n      }, \"No data is available at the moment\")));\n    }\n  }]);\n\n  return ConceptMapContainer;\n}(Component);\n\nexport default ConceptMapContainer;","map":{"version":3,"sources":["C:/Users/Miaomiao/interestminer/Frontend/src/components/ConceptMap/ConceptMapContainer.js"],"names":["React","Component","Stage","Layer","Rect","Text","Circle","Line","toast","Loader","RestAPI","handleServerErrors","ConceptMapContainer","props","toTitleCase","phrase","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","extractNodes","data","state","categories","keywords","links","index","length","keyword","keywordCategories","category","categoryIndex","setState","generateCoordinates","totalKeywords","Object","keys","KeywordBlockTotalSize","keywordNodeSpacing","keywordNodeSize","keywordStartOffset","parseInt","stageHeight","keywordCount","y","x","KeywordNodeX","totalCategories","categoriesBlockTotalSize","categoryNodeSpacing","categoryNodeHeight","categoriesStartOffset","categoryCount","categoryNodeX","getNodes","nodes","keywordKey","keywordLink","push","highlight","highlightColor","lineColor","circleFillColor","e","mouseOverEvent","mouseOutEvent","textFontFamily","categoryNodeWidth","rectFillColor","categoryText","event","nodeType","nodeKey","stage","target","getStage","container","style","cursor","categoryKeys","indexOf","stageWidth","rectStrokeColor","circleStrokeColor","isLoading","isData","isLoding","conceptChart","then","response","console","log","chartData","dataLength","Math","min","rank","weight","source","item","name","catch","error","containerDiv","document","querySelectorAll","width","highlighedCategory","filter","padding","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\nimport { Stage, Layer, Rect, Text, Circle, Line } from \"react-konva\";\nimport { toast } from \"react-toastify\";\nimport Loader from \"react-loader-spinner\";\nimport RestAPI from \"services/api\";\n\nimport { handleServerErrors } from \"utils/errorHandler\";\n\nclass ConceptMapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stageHeight = 1200;\n    this.stageWidth = 900;\n\n    this.keywordNodeSize = 20;\n    this.keywordNodeSpacing = 30;\n    this.KeywordNodeX = 150;\n\n    this.categoryNodeHeight = 30;\n    this.categoryNodeWidth = 200;\n    this.categoryNodeSpacing = 20;\n    this.categoryNodeX = this.stageWidth - this.categoryNodeWidth - 150;\n\n    this.lineColor = \"#003f5c\";\n    this.rectStrokeColor = \"black\";\n    this.rectFillColor = \"#dd5182\";\n    this.circleStrokeColor = \"black\";\n    this.circleFillColor = \"#E5AE19\";\n\n    this.highlightColor = \"#ffa600\";\n\n    this.textFontFamily =\n      '-apple-system,BlinkMacSystemFont,\"Segoe UI\",\"Roboto\",\"Oxygen\",\"Ubuntu\",\"Cantarell\",\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif';\n\n    this.state = {\n      data: [],\n      isLoading: true,\n      isData: true,\n    };\n  }\n\n  toTitleCase = (phrase) => {\n    return phrase\n      .toLowerCase()\n      .split(\" \")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n  };\n\n  componentDidMount() {\n    this.setState({ isLoding: true }, () => {\n      RestAPI.conceptChart()\n        .then((response) => {\n          console.log(response);\n          if (response.data.length === 0) {\n            this.setState({\n              isData: false,\n            });\n          }\n          let chartData = [];\n          let dataLength = Math.min(response.data.length, 5);\n          for (let index = 0; index < dataLength; index++) {\n            chartData.push({\n              keyword: response.data[index].keyword,\n              rank: response.data[index].weight,\n              source: response.data[index].source,\n              category: response.data[index].categories.map(\n                (item) => item.name\n              ),\n            });\n          }\n          this.setState(\n            {\n              isLoding: false,\n              data: chartData,\n            },\n            this.extractNodes\n          );\n        })\n        .catch((error) => {\n          this.setState({ isLoding: false });\n          handleServerErrors(error, toast.error);\n        });\n    });\n  }\n\n  extractNodes = () => {\n    const { data } = this.state;\n    let categories = {};\n    let keywords = {};\n    let links = {};\n    for (let index = 0; index < data.length; index++) {\n      const keyword = data[index].keyword;\n      const keywordCategories = data[index].category;\n      keywords[keyword] = {};\n      links[keyword] = keywordCategories;\n      for (\n        let categoryIndex = 0;\n        categoryIndex < keywordCategories.length;\n        categoryIndex++\n      ) {\n        categories[keywordCategories[categoryIndex]] = {};\n      }\n    }\n    this.setState({ keywords, categories, links }, this.generateCoordinates);\n  };\n\n  generateCoordinates = () => {\n    const { keywords, categories } = this.state;\n\n    const totalKeywords = Object.keys(keywords).length;\n    const KeywordBlockTotalSize =\n      totalKeywords * (this.keywordNodeSpacing + this.keywordNodeSize);\n    const keywordStartOffset = parseInt(\n      (this.stageHeight - KeywordBlockTotalSize) / 2\n    );\n\n    let keywordCount = 0;\n    for (let keyword in keywords) {\n      let y =\n        keywordStartOffset +\n        parseInt(this.keywordNodeSpacing / 2) +\n        keywordCount *\n          (parseInt(this.keywordNodeSpacing / 2) + this.keywordNodeSize);\n      keywordCount += 1;\n      keywords[keyword].x = this.KeywordNodeX;\n      keywords[keyword].y = y;\n    }\n\n    const totalCategories = Object.keys(categories).length;\n    const categoriesBlockTotalSize =\n      totalCategories * (this.categoryNodeSpacing + this.categoryNodeHeight);\n\n    const categoriesStartOffset = parseInt(\n      (this.stageHeight - categoriesBlockTotalSize) / 2\n    );\n\n    let categoryCount = 0;\n    for (let category in categories) {\n      let y =\n        categoriesStartOffset +\n        parseInt(this.categoryNodeSpacing / 2) +\n        categoryCount *\n          (parseInt(this.categoryNodeSpacing / 2) + this.categoryNodeHeight);\n      categoryCount += 1;\n      categories[category].x = this.categoryNodeX;\n      categories[category].y = y;\n    }\n\n    this.setState({ keywords, categories });\n  };\n\n  getNodes = () => {\n    const { keywords, categories, links } = this.state;\n    let nodes = [];\n\n    for (let keywordKey in links) {\n      const keywordLink = links[keywordKey];\n      const keyword = keywords[keywordKey];\n      for (let index in keywordLink) {\n        const category = categories[keywordLink[index]];\n        nodes.push(\n          <Line\n            points={[\n              keyword.x,\n              keyword.y,\n              category.x,\n              category.y + parseInt(this.categoryNodeHeight / 2),\n            ]}\n            tension={500}\n            stroke={\n              keyword.highlight && category.highlight\n                ? this.highlightColor\n                : this.lineColor\n            }\n          />\n        );\n      }\n    }\n\n    for (let keyword in keywords) {\n      nodes.push(\n        <Circle\n          key={keyword + \"circle\"}\n          x={keywords[keyword].x}\n          y={keywords[keyword].y}\n          radius={10}\n          fill={this.circleFillColor}\n          strokeWidth=\"3\"\n          onMouseOver={(e) => this.mouseOverEvent(e, \"keyword\", keyword)}\n          onMouseOut={(e) => this.mouseOutEvent(e, \"keyword\", keyword)}\n          stroke={\n            keywords[keyword].highlight\n              ? this.highlightColor\n              : this.circleFillColor\n          }\n        />\n      );\n      nodes.push(\n        <Text\n          key={keyword + \"text\"}\n          x={10}\n          y={keywords[keyword].y - 5}\n          text={this.toTitleCase(keyword)}\n          fontFamily={this.textFontFamily}\n        />\n      );\n    }\n\n    for (let category in categories) {\n      nodes.push(\n        <Rect\n          key={category + \"rect\"}\n          x={categories[category].x}\n          y={categories[category].y}\n          height={this.categoryNodeHeight}\n          width={this.categoryNodeWidth}\n          cornerRadius={10}\n          fill={this.rectFillColor}\n          onMouseOver={(e) => this.mouseOverEvent(e, \"category\", category)}\n          onMouseOut={(e) => this.mouseOutEvent(e, \"category\", category)}\n          strokeWidth=\"3\"\n          stroke={\n            categories[category].highlight\n              ? this.highlightColor\n              : this.rectFillColor\n          }\n        />\n      );\n      // add ellipsis to text after 10 chars\n      let categoryText =\n        category.length > 35 ? category.slice(0, 35) + \"...\" : category;\n      nodes.push(\n        <Text\n          key={category + \"text\"}\n          x={categories[category].x + 10}\n          y={categories[category].y + 10}\n          onMouseOver={(e) => this.mouseOverEvent(e, \"category\", category)}\n          onMouseOut={(e) => this.mouseOutEvent(e, \"category\", category)}\n          text={categoryText}\n          fontFamily={this.textFontFamily}\n          stroke=\"white\"\n          strokeWidth=\"1\"\n        />\n      );\n    }\n    return nodes;\n  };\n\n  mouseOverEvent = (event, nodeType, nodeKey) => {\n    const stage = event.target.getStage();\n    const container = stage.container();\n    container.style.cursor = \"pointer\";\n\n    let { categories, keywords, links } = this.state;\n    if (nodeType === \"keyword\") {\n      keywords[nodeKey].highlight = true;\n      let categoryKeys = links[nodeKey];\n\n      for (let index in categoryKeys) {\n        categories[categoryKeys[index]].highlight = true;\n      }\n    }\n\n    if (nodeType === \"category\") {\n      categories[nodeKey].highlight = true;\n\n      for (let keyword in links) {\n        if (links[keyword].indexOf(nodeKey) > -1) {\n          keywords[keyword].highlight = true;\n        }\n      }\n    }\n\n    this.setState({ categories, keywords });\n  };\n\n  mouseOutEvent = (event) => {\n    const container = event.target.getStage().container();\n    container.style.cursor = \"default\";\n\n    let { categories, keywords } = this.state;\n    for (let category in categories) {\n      categories[category].highlight = false;\n    }\n\n    for (let keyword in keywords) {\n      keywords[keyword].highlight = false;\n    }\n\n    this.setState({ categories, keywords });\n  };\n\n  render() {\n    const containerDiv = document.querySelectorAll(\".card-body\")[0];\n    // const width = containerDiv ? containerDiv.clientWidth : this.stageWidth;\n    const width = this.stageWidth;\n    const { categories } = this.state;\n    let highlighedCategory = [];\n    if (categories) {\n      highlighedCategory = Object.keys(categories).filter(\n        (item) => categories[item].highlight\n      );\n    }\n\n    return (\n      <>\n        <div id=\"conceptMapWrapper\">\n          {this.state.isLoding ? (\n            <div className=\"text-center\" style={{ padding: \"20px\" }}>\n              <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n            </div>\n          ) : this.state.isData ? (\n            <>\n              <div>\n                <Stage width={width} height={this.stageHeight}>\n                  <Layer>{this.getNodes()}</Layer>\n                </Stage>\n                <div align=\"center\">\n                  {highlighedCategory.length ? highlighedCategory[0] : \"\"}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{ textAlign: \"center\" }}>\n              No data is available at the moment\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConceptMapContainer;\n"]},"metadata":{},"sourceType":"module"}