{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Miaomiao\\\\interestminer\\\\frontend\\\\src\\\\components\\\\Chart\\\\StreamChart.js\";\nimport React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { toast } from \"react-toastify\";\nimport Loader from \"react-loader-spinner\";\nimport RestAPI from \"services/api\";\nimport { handleServerErrors } from \"utils/errorHandler\";\n\nvar StreamChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(StreamChart, _React$Component);\n\n  var _super = _createSuper(StreamChart);\n\n  function StreamChart() {\n    var _this;\n\n    _classCallCheck(this, StreamChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      chartOptions: {\n        twitterXaxis: {},\n        paperXaxis: {},\n        twitterSeries: [],\n        paperSeries: []\n      },\n      isLoding: true\n    };\n\n    _this.getChartOptions = function (data) {\n      var chartOptions = {};\n      var xAxisOptions = Object.keys(data);\n      var seriesData = [];\n      var keywords = {};\n      var keywordDataOverTime = Object.values(data);\n\n      for (var index = 0; index < keywordDataOverTime.length; index++) {\n        for (var itemIndex = 0; itemIndex < keywordDataOverTime[index].length; itemIndex++) {\n          keywords[keywordDataOverTime[index][itemIndex][\"keyword__name\"]] = true;\n        }\n      }\n\n      var _loop = function _loop() {\n        var keywordName = _Object$keys[_i];\n        var monthRank = [];\n\n        for (var _index = 0; _index < xAxisOptions.length; _index++) {\n          var searchedList = data[xAxisOptions[_index]].filter(function (item) {\n            return item[\"keyword__name\"] === keywordName;\n          });\n\n          monthRank.push(searchedList.length ? searchedList[0].weight : 0);\n        }\n\n        seriesData.push({\n          name: keywordName,\n          data: monthRank\n        });\n      };\n\n      for (var _i = 0, _Object$keys = Object.keys(keywords); _i < _Object$keys.length; _i++) {\n        _loop();\n      }\n\n      return {\n        xAxis: xAxisOptions,\n        series: seriesData\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        isLoding: true\n      }, function () {\n        RestAPI.streamChart().then(function (response) {\n          var twitterData = _this2.getChartOptions(response.data.twitter_data);\n\n          var paperData = _this2.getChartOptions(response.data.paper_data);\n\n          var chartOptions = {\n            twitterXaxis: twitterData.xAxis,\n            twitterSeries: twitterData.series,\n            paperXaxis: paperData.xAxis,\n            paperSeries: paperData.series\n          };\n\n          _this2.setState({\n            chartOptions,\n            isLoding: false\n          });\n        }).catch(function (error) {\n          _this2.setState({\n            isLoding: false\n          });\n\n          handleServerErrors(error, toast.error);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var graphOptions = {\n        chart: {\n          toolbar: {\n            show: true,\n            offsetX: 0,\n            offsetY: 0,\n            tools: {\n              download: false,\n              selection: true,\n              zoom: false,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: false,\n              customIcons: []\n            },\n            autoSelected: \"zoom\"\n          },\n          type: \"area\",\n          stacked: true\n        },\n        colors: [\"#1F85DE\", \"#D81FDE\", \"#DE1F85\", \"#DE781F\", \"#DE1F26\", \"#BFDE1F\", \"#6C0D5D\", \"#0D6C1C\", \"#25DE1F\", \"#3E1FDE\"],\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 1\n        },\n        fill: {\n          type: \"solid\"\n        },\n        xaxis: {}\n      };\n      var twitterGraphOptions = JSON.parse(JSON.stringify(graphOptions));\n      twitterGraphOptions.xaxis.categories = this.state.chartOptions.twitterXaxis;\n      var paperGraphOptions = JSON.parse(JSON.stringify(graphOptions));\n      paperGraphOptions.xaxis.categories = this.state.chartOptions.paperXaxis;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, this.state.isLoding ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        style: {\n          padding: \"20px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        type: \"Puff\",\n        color: \"#00BFFF\",\n        height: 100,\n        width: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, \"Twitter Keyword Trends\"), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"chart\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Chart, {\n        type: \"area\",\n        series: this.state.chartOptions.twitterSeries,\n        options: twitterGraphOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, \"Paper Keyword Trends\"), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"chart\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Chart, {\n        type: \"area\",\n        series: this.state.chartOptions.paperSeries,\n        options: paperGraphOptions,\n        height: 500,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return StreamChart;\n}(React.Component);\n\nexport default StreamChart;","map":{"version":3,"sources":["C:/Users/Miaomiao/interestminer/frontend/src/components/Chart/StreamChart.js"],"names":["React","Chart","toast","Loader","RestAPI","handleServerErrors","StreamChart","state","chartOptions","twitterXaxis","paperXaxis","twitterSeries","paperSeries","isLoding","getChartOptions","data","xAxisOptions","Object","keys","seriesData","keywords","keywordDataOverTime","values","index","length","itemIndex","keywordName","monthRank","searchedList","filter","item","push","weight","name","xAxis","series","setState","streamChart","then","response","twitterData","twitter_data","paperData","paper_data","catch","error","graphOptions","chart","toolbar","show","offsetX","offsetY","tools","download","selection","zoom","zoomin","zoomout","pan","reset","customIcons","autoSelected","type","stacked","colors","dataLabels","enabled","stroke","curve","width","fill","xaxis","twitterGraphOptions","JSON","parse","stringify","categories","paperGraphOptions","padding","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { toast } from \"react-toastify\";\nimport Loader from \"react-loader-spinner\";\nimport RestAPI from \"services/api\";\n\nimport { handleServerErrors } from \"utils/errorHandler\";\nclass StreamChart extends React.Component {\n  state = {\n    chartOptions: {\n      twitterXaxis: {},\n      paperXaxis: {},\n      twitterSeries: [],\n      paperSeries: [],\n    },\n    isLoding: true,\n  };\n\n  getChartOptions = (data) => {\n    let chartOptions = {};\n\n    let xAxisOptions = Object.keys(data);\n    let seriesData = [];\n    let keywords = {};\n\n    let keywordDataOverTime = Object.values(data);\n    for (let index = 0; index < keywordDataOverTime.length; index++) {\n      for (\n        let itemIndex = 0;\n        itemIndex < keywordDataOverTime[index].length;\n        itemIndex++\n      )\n        keywords[keywordDataOverTime[index][itemIndex][\"keyword__name\"]] = true;\n    }\n\n    for (let keywordName of Object.keys(keywords)) {\n      let monthRank = [];\n      for (let index = 0; index < xAxisOptions.length; index++) {\n        let searchedList = data[xAxisOptions[index]].filter(\n          (item) => item[\"keyword__name\"] === keywordName\n        );\n        monthRank.push(searchedList.length ? searchedList[0].weight : 0);\n      }\n      seriesData.push({\n        name: keywordName,\n        data: monthRank,\n      });\n    }\n    return { xAxis: xAxisOptions, series: seriesData };\n  };\n\n  componentDidMount() {\n    this.setState({ isLoding: true }, () => {\n      RestAPI.streamChart()\n        .then((response) => {\n          let twitterData = this.getChartOptions(response.data.twitter_data);\n          let paperData = this.getChartOptions(response.data.paper_data);\n\n          let chartOptions = {\n            twitterXaxis: twitterData.xAxis,\n            twitterSeries: twitterData.series,\n            paperXaxis: paperData.xAxis,\n            paperSeries: paperData.series,\n          };\n\n          this.setState({ chartOptions, isLoding: false });\n        })\n        .catch((error) => {\n          this.setState({ isLoding: false });\n          handleServerErrors(error, toast.error);\n        });\n    });\n  }\n\n  render() {\n    let graphOptions = {\n      chart: {\n        toolbar: {\n          show: true,\n          offsetX: 0,\n          offsetY: 0,\n          tools: {\n            download: false,\n            selection: true,\n            zoom: false,\n            zoomin: true,\n            zoomout: true,\n            pan: true,\n            reset: false,\n            customIcons: [],\n          },\n          autoSelected: \"zoom\",\n        },\n\n        type: \"area\",\n        stacked: true,\n      },\n      colors: [\n        \"#1F85DE\",\n        \"#D81FDE\",\n        \"#DE1F85\",\n        \"#DE781F\",\n        \"#DE1F26\",\n        \"#BFDE1F\",\n        \"#6C0D5D\",\n        \"#0D6C1C\",\n        \"#25DE1F\",\n        \"#3E1FDE\",\n      ],\n      dataLabels: { enabled: false },\n      stroke: {\n        curve: \"smooth\",\n        width: 1,\n      },\n      fill: { type: \"solid\" },\n      xaxis: {},\n    };\n    let twitterGraphOptions = JSON.parse(JSON.stringify(graphOptions));\n    twitterGraphOptions.xaxis.categories = this.state.chartOptions.twitterXaxis;\n\n    let paperGraphOptions = JSON.parse(JSON.stringify(graphOptions));\n    paperGraphOptions.xaxis.categories = this.state.chartOptions.paperXaxis;\n    return (\n      <div>\n        {this.state.isLoding ? (\n          <div className=\"text-center\" style={{ padding: \"20px\" }}>\n            <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n          </div>\n        ) : (\n          <>\n            <div align=\"center\">Twitter Keyword Trends</div>\n            <div id=\"chart\">\n              <Chart\n                type=\"area\"\n                series={this.state.chartOptions.twitterSeries}\n                options={twitterGraphOptions}\n              />\n            </div>\n            <br />\n            <div align=\"center\">Paper Keyword Trends</div>\n            <div id=\"chart\">\n              <Chart\n                type=\"area\"\n                series={this.state.chartOptions.paperSeries}\n                options={paperGraphOptions}\n                height={500}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default StreamChart;\n"]},"metadata":{},"sourceType":"module"}