{"ast":null,"code":"import { toast } from 'react-toastify';\nexport var handleServerErrors = function handleServerErrors(error, enqueueSnackbar) {\n  var defaultMsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Something went wrong. Try again.\";\n\n  try {\n    if (error && error.response && error.response.status === 401) {// enqueueSnackbar(\"Session expired. Login Again\");\n    } else if (error && error.response && error.response.status === 400 && error.response.data) {\n      var error_data = getErrorData(error.response.message ? error.response.message : error);\n      var error_message = defaultMsg;\n      var error_key = Object.keys(error_data)[0] || \"\";\n      if (typeof error_data === 'object') error_message = \"\".concat(titleCase(error_key.replace(/_/g, ' ')), \": \").concat(error_data[error_key]);else error_message = error_data;\n      enqueueSnackbar(error_message, {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 5000\n      });\n    } else {\n      enqueueSnackbar(defaultMsg, {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 5000\n      });\n    }\n  } catch (error) {\n    enqueueSnackbar(defaultMsg, {\n      position: toast.POSITION.TOP_RIGHT,\n      autoClose: 5000\n    });\n  }\n};\n\nvar getErrorData = function getErrorData(error) {\n  var error_data = [];\n\n  if (error.response.data.message && Object.keys(error.response.data.message).length) {\n    error_data = error.response.data.message;\n  } else if (Object.keys(error.response.data).length) {\n    error_data = error.response.data;\n  }\n\n  return error_data;\n};\n\nexport var titleCase = function titleCase(string) {\n  var sentence = string.toLowerCase().split(\" \");\n\n  for (var i = 0; i < sentence.length; i++) {\n    sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n  }\n\n  if (sentence[0] === 'Address') {\n    return sentence[0];\n  } else {\n    return sentence.join(\" \");\n  }\n};","map":{"version":3,"sources":["C:/Users/franc/Desktop/Interest-Miner/Frontend/src/utils/errorHandler.js"],"names":["toast","handleServerErrors","error","enqueueSnackbar","defaultMsg","response","status","data","error_data","getErrorData","message","error_message","error_key","Object","keys","titleCase","replace","position","POSITION","TOP_RIGHT","autoClose","length","string","sentence","toLowerCase","split","i","toUpperCase","slice","join"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\n\nexport const handleServerErrors = (error, enqueueSnackbar, defaultMsg = \"Something went wrong. Try again.\") => {\n    try {\n        if (error && error.response && error.response.status === 401) {\n            // enqueueSnackbar(\"Session expired. Login Again\");\n        } else if (error && error.response && error.response.status === 400 && error.response.data) {\n            const error_data = getErrorData(error.response.message ? error.response.message : error);\n            let error_message = defaultMsg;\n            const error_key = Object.keys(error_data)[0] || \"\";\n            if (typeof error_data === 'object') error_message = `${titleCase(error_key.replace(/_/g, ' '))}: ${error_data[error_key]}`;\n            else error_message = error_data\n            enqueueSnackbar(error_message, { position: toast.POSITION.TOP_RIGHT, autoClose: 5000 });\n        } else {\n            enqueueSnackbar(defaultMsg, { position: toast.POSITION.TOP_RIGHT, autoClose: 5000 });\n        }\n    } catch (error) {\n        enqueueSnackbar(defaultMsg, { position: toast.POSITION.TOP_RIGHT, autoClose: 5000 });\n    }\n\n\n}\n\nconst getErrorData = (error) => {\n    let error_data = [];\n    if (error.response.data.message && Object.keys(error.response.data.message).length) {\n        error_data = error.response.data.message;\n    } else if (Object.keys(error.response.data).length) {\n        error_data = error.response.data;\n    }\n    return error_data;\n}\n\nexport const titleCase = (string) => {\n    var sentence = string.toLowerCase().split(\" \");\n    for (var i = 0; i < sentence.length; i++) {\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n    }\n    if (sentence[0] === 'Address') {\n        return sentence[0]\n    }\n    else {\n        return sentence.join(\" \");\n    }\n}"]},"metadata":{},"sourceType":"module"}